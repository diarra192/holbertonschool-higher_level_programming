Using class ``BaseGeometry``
-----------------------

Class BaseGeometry contains functions that validates given parameters
Currently contains function area(): not implemented
Currently contains function integer_validator(name, value):
  - Validates `value` if it is an integer
  - Returns nothing if True

First import class ``BaseGeometry``

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

Function area():Basic MyList usage (pos, neg, zero):
    >>> my_list = MyList()
    >>> my_list.append(-1)
    >>> my_list.append(4)
    >>> my_list.append(3)
    >>> my_list.append(0)
    >>> print(my_list)
    [-1, 4, 3, 0]

Basic print_sorted usage:
    >>> my_list.print_sorted()
    [-1, 0, 3, 4]Basic MyList usage (pos, neg, zero):
    >>> my_list = MyList()
    >>> my_list.append(-1)
    >>> my_list.append(4)
    >>> my_list.append(3)
    >>> my_list.append(0)
    >>> print(my_list)
    [-1, 4, 3, 0]

Basic print_sorted usage:
    >>> my_list.print_sorted()
    [-1, 0, 3, 4]
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Function integer_validator basic usage:
    >>> bg.integer_validator("holberton", 98)

Function integer_validator 0 input usage:
    >>> bg.integer_validator("holberton", 0)
    Traceback (most recent call last):
    ...
    ValueError: holberton must be greater than 0

Function integer_validator negative input usage:
    >>> bg.integer_validator("holberton", -1)
    Traceback (most recent call last):
    ...
    ValueError: holberton must be greater than 0

Function integer_validator non int input usage:'
